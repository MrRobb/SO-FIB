COMANDOS

-------------------------------------------------------------------------------------------------------------------------------

Sessió 1:
 
	man: accedeix a manuals on-line 
	
	ls: mostra contingut del directori
		-l: List in long format.
		-a: Include directory entries whose names begin with a dot (.). -> mostra arxius ocults

	alias: define un nombre alternativo a un comando.
		#alias ls='ls -la' (-l i -a junts) 

	mkdir: crea directorio 

	rmdir: elimina directorio vacío

	mv: canvia nom del fitxer o el mou a un altre directori
		-i: Cause mv to write a prompt to standard error before moving a file that would overwrite an existing file.  If the response from the standard input begins with the character 'y' or 'Y', the move is attempted. (The -i option over-rides any previous -f or -n options.)

	cp: copia fitxers i directoris
		-i: Cause cp to write a prompt to the standard error output before copying a file that would overwrite an existing file.  If the response from the standard input begins with the character 'y' or 'Y', the file copy is attempted. (The -i option overrides any previous -n option.)
	
	rm: borra fitxers o directoris
		-i: Request confirmation before attempting to remove each file, regardless of the file's permissions, or whether or not the standard input device is aterminal. The -i option overrides any previous -f options.

	echo: visualitza un text (pot ser una variable d'entorn)

	less: mostra fitxer en un temany apte per terminal

	cat: concatena ficheros y los muestra en su salida estándar

	grep: busca text (o patrons de text) en fitxers
		#grep hola test test1 test2 test3 test4

	gedit: editor (sublime mola més)

	env: ejecuta un comando en un entorno modificado, si no se le pasa comando, muestra el entorno
	
	chmod: modifica els permisos d'accés a un fitxer

	which: localitza un comando

	help: ofrece información sobre comandos internos de la Shell
		usar con: help, export, cd, alias
		export NOMBRE_VARIABLE=valor (sin espacios).


	en man bash: 
	(nota: el carácter “/” sirve para buscar patrones en las páginas del man. Utilízalo para encontrar directamente la descripción de estas variables)
		HOME: (echo &HOME) The home directory of the current user; the default argument for the cd builtin command. The value of this variable is also used when performing tilde expansion.
		PATH: (echo &PATH) The search path for commands. It is a colon-separated list of directories in which the shell looks for commands. A zero-length (null) directory name in the value of PATH indicates the current directory. A null directory name may appear as two adjacent colons,  or as an initial or trailing colon. The default path is system-dependent, and is set by the administrator  who installs bash.
		PWD: (echo &PWD) The current working directory as set by the cd command.

-------------------------------------------------------------------------------------------------------------------------------

Sessió 2:
	
	make: Utilidad para automatizar el proceso de compilación/linkaje de un programa o grupo de programas
	
	gcc: compilador de C en GNU

		-c: Compile or assemble the source files, but do not link.  The linking stage simply is not done. The ultimate output is in the form of an object file for each source file. By default, the object file name for a source file is made by replacing the suffix .c, .i, .s, etc., with .o. Unrecognized input files, not requiring compilation or assembly, are ignored.
		-o: (-o file) Place output in file file.  This applies to whatever sort of output is being produced, whether it be an executable file, an object file, an assembler file or preprocessed C code. If -o is not specified, the default is to put an executable file in a.out, the object file for source.suffix in source.o, its assembler file in source.s, a precompiled header file in source.suffix.gch, and all preprocessed C source on standard output.
		-I: includes
		-L, -l: libraries

	//No comandos:
	print: conversión de formato almacenándola en un búffer
		printf,   fprintf,   dprintf,  sprintf,  snprintf,  vprintf,  vfprintf,
       	vdprintf, vsprintf, vsnprintf - formatted output conversion
		#include <stdio.h>
	    int printf(const char *format, ...); int fprintf(FILE *stream, const char *format, ...); int dprintf(int fd, const char *format, ...); int sprintf(char *str, const char *format, ...); int snprintf(char *str, size_t size, const char *format, ...);
	atoi: convierte un string a numero entero
	indent: indentación de ficheros fuente
	
------------------------------------------------------------------------------------------------------------------------------

Sessió 3: processos 	

	!!!!!

		int main (int argc,char *argv[])
		{
		...
		    if ((pid=fork())<0) error_y_exit(“Error en fork”,1);
		    ...
		}

		void error_y_exit(char *msg,int exit_status)
		{
		    perror(msg);	
	 	    exit(exit_status);
		} 	

		
		Además, en caso de que el error sea crítico, como 			por ejemplo que falle un fork o un execlp, 			tiene que terminar la ejecución del programa.	
	!!!!!

	getpid: (pid_t getpid(void); pid_t getppid(void);)
		retorna pid del procés que executa
		llibreries: #include <sys/types.h>, #include <unistd.h>
		RETURN VALUE: 
			getpid() -> returns  the process ID of the calling process.
			getppid() -> returns  the  process  ID of the parent of the calling process.
		mai té error.

	fork:	pid_t fork(void);
		crea un proceso nuevo, hijo del que ejecuta el fork
		llibreries: #include <unistd.h>
		The child's parent process ID is the same as the parent's process ID.
		The child does not inherit timers from its parent (alarm(2)...).
		The termination signal of the child is always SIGCHLD.
		RETURN VALUE: 
			Success:the PID of the child process is returned in the parent
				and 0 is returned in the child 
			Failure:-1 is returned in the parent
				no child process is created
				and errno is set appropriately.


	exit:	void exit(int status);
		acaba el procés que executa la crida
		llibreries: #include <stdlib.h>
		exit() causes normal process termination and the value of status is returned to the parent
		RETURN VALUE: The exit() function does not return.

	execlp:	extern char **environ;
		int execl(const char *path, const char *arg, .../* (char  *) NULL */);
       		int execlp(const char *file, const char *arg, .../* (char  *) NULL */);
       		int execle(const char *path, const char *arg, .../*, (char *) NULL, char * const envp[]*/);
       		int execv(const char *path, char *const argv[]);
       		int execvp(const char *file, char *const argv[]);
       		int execvpe(const char *file, char *const argv[], char *const envp[]);

		En path debemos pasar la ruta del ejecutable
		file: Busca el archivo ejecutable en todos los directorios especificados por PATH. 
		Esta función retorna -1 en caso de error, en caso contrario no retorna. 
		No retorna ya que hemos sustituido el contexto del programa por el de otro. 
		Debemos pasar los argumentos para el nuevo programa a ejecutarse en *arg. 
		Se heredan los descriptores de ficheros abiertos
		Todas las señales pasaran a la acción por defecto.
		
		Ejecuta un programa en el contexto del mismo proceso.
		Llibreries: #include <unistd.h>
		The exec() family of functions replaces the current process image with a new process image.

		RETURN VALUE: 	The exec() functions return only if an error has occurred.
				The return value is -1, and errno is set to indicate the error.
	 	

	perror:	void perror(const char *s);
		escribe un mensaje del último error
		llibreries: #include <errno.h>

	ps:	(comando)
		devuelve la información de los procesos
		-a: Select all processes associated with a terminal.
		-u: (userlist) Select by effective user ID or name. This selects the processes whose effective user name or ID is in userlist.
		-o: (format) User-defined format.
		    format is a single argument in the form of a blank-separated or comma-separated list, which offers a way to specify individual output columns. 

	proc:	(directoy)
		proc - process information pseudo-filesystem
		
		/proc/[pid]/cmdline:
		      This read-only file  holds  the  complete  command
		      line for the process, unless the process is a zom‐
		      bie.  In the latter case, there is nothing in this
		      file:  that  is, a read on this file will return 0
		      characters.  The command-line arguments appear  in
		      this  file  as  a set of strings separated by null
		      bytes ('\0'), with a further null byte  after  the
		      last string.
	 	
		/proc/[pid]/cwd
		      This is a symbolic link  to  the  current  working
		      directory of the process.  To find out the current
		      working directory of process 20, for instance, you
		      can do this: $ cd /proc/20/cwd; /bin/pwd

		/proc/[pid]/environ
		      This  file  contains  the  environment   for   the
		      process.   The entries are separated by null bytes
		      ('\0'), and there may be a null byte at  the  end.
		      Thus,  to  print out the environment of process 1,
		      you would do: $ strings /proc/1/environ
		
		/proc/[pid]/exe
		      Under Linux 2.2 and later, this file is a symbolic
		      link  containing  the  actual pathname of the exe‐
		      cuted command.

		/proc/[pid]/stat
		      Status information about  the  process.
		      (1) pid %d The process ID.
		      (2) comm %s The filename of the executable, parentheses.
		      (3) state %c:
                        	R  Running
                        	S  Sleeping in an interruptible wait
                        	D  Waiting in uninterruptible disk sleep
                        	Z  Zombie
                        	T  Stopped (on a signal) or trace stopped
                        	t  Tracing stop
                        	W  Paging
                        	X, x  Dead
                        	K  Wakekill 
                        	W  Waking
                        	P  Parked
		      (4) ppid %d The PID of the parent of this process.
		      (5) pgrp %d The process group ID of the process.
		      (6) session %d The session ID of the process.
		      (7) tty_nr %d The controlling terminal of the process.
		      (8) tpgid %d The ID of the foreground process group of process' controlling terminal.
		      (9) flags %u The  kernel  flags  word of the process.
		      (10) minflt  %lu ...
		      (11) cminflt  %lu ...
		      (12) majflt  %lu ...
		      (13) cmajflt  %lu ...
		      (14) utime  %lu: 	Amount of time  that  this  process  has
		                	been scheduled in user mode, measured in
		                	clock ticks.
		      (15) stime  %lu:	Amount of time  that  this  process  has
                        		been scheduled in kernel mode, measured
                        		in clock ticks.
		      (16) cutime  %ld:	Amount   of  time  that  this  process's
		                	waited-for children have been  scheduled
		                	in  user  mode,  measured in clock ticks
		      (17) cstime  %ld: Amount   of  time  that  this  process's
		                	waited-for children have been  scheduled
		                	in  kernel mode, measured in clock ticks.
		      (18) priority  %ld
		      (19) nice  %ld The nice value
		      (20) num_threads  %ld Number of threads in this process
		      (21) itrealvalue  %ld
		                The  time  in  jiffies  before  the next
		                SIGALRM is sent to the process due to an
		                interval  timer. 
		      (22) starttime  %llu
		                The  time the process started after sys‐
		                tem boot.
		      (23) vsize  %lu  Virtual memory size in bytes.
		      (24) rss  %ld  Resident  Set  Size: number of pages the process has in  real  memory.
		      (25) rsslim  %lu Current  soft  limit in bytes on the rss of the process
		      (26) startcode  %lu The address above which program text can run.
		      (27) endcode  %lu The address below which program text can run.
		      (28) startstack  %lu The  address of the start of the stack.
		      (29) kstkesp  %lu The  current value of ESP (stack pointer)
		      (30) kstkeip  %lu The current EIP (instruction pointer).
		      (31) signal  %lu The bitmap of pending signals, displayed as  a decimal number.
		      (32) blocked  %lu The bitmap of blocked signals, displayed as  a decimal number. 
		      (33) sigignore  %lu The bitmap of ignored signals, displayed as  a decimal number
		      (34) sigcatch  %lu The bitmap of caught signals,  displayed as  a decimal number.
		      (35) wchan  %lu  This  is  the  "channel"  in  which  the process  is  waiting.  
		      (36) nswap  %lu  Number   of  pages  swapped
		      (37) cnswap  %lu Cumulative  nswap  for  child  processes
		      (38) exit_signal  %d Signal to be sent to parent when we die.
		      (39) processor  %d  CPU number last executed on.
		      (40) rt_priority  %u  Real-time  scheduling priority
		      (41) policy  %u Scheduling  policy
		      ...
-------------------------------------------------------------------------------------------------------------------------------
